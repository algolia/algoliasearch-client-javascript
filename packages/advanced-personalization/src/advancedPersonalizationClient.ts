// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type {
  CreateClientOptions,
  Headers,
  Host,
  QueryParameters,
  Request,
  RequestOptions,
} from '@algolia/client-common';
import { createAuth, createTransporter, getAlgoliaAgent } from '@algolia/client-common';

import type { AcceptedResponse } from '../model/acceptedResponse';
import type { ConfigurationObject } from '../model/configurationObject';
import type { ConfigurationParameters } from '../model/configurationParameters';

import type { DeleteUserResponse } from '../model/deleteUserResponse';

import type { GetUsersResponse } from '../model/getUsersResponse';
import type { PutConfigResponse } from '../model/putConfigResponse';
import type { RealtimeUser } from '../model/realtimeUser';

import type { User } from '../model/user';

import type {
  ComputeRealtimeUserProps,
  CustomDeleteProps,
  CustomGetProps,
  CustomPostProps,
  CustomPutProps,
  DeleteUserProps,
  GetRealtimeUserProps,
  GetUserProps,
  GetUsersProps,
} from '../model/clientMethodProps';

export const apiClientVersion = '0.0.1-alpha.3';

export const REGIONS = ['eu', 'us'] as const;
export type Region = (typeof REGIONS)[number];
export type RegionOptions = { region: Region };

function getDefaultHosts(region: Region): Host[] {
  const url = 'ai-personalization.{region}.algolia.com'.replace('{region}', region);

  return [{ url, accept: 'readWrite', protocol: 'https' }];
}

export function createAdvancedPersonalizationClient({
  appId: appIdOption,
  apiKey: apiKeyOption,
  authMode,
  algoliaAgents,
  region: regionOption,
  ...options
}: CreateClientOptions & RegionOptions) {
  const auth = createAuth(appIdOption, apiKeyOption, authMode);
  const transporter = createTransporter({
    hosts: getDefaultHosts(regionOption),
    ...options,
    algoliaAgent: getAlgoliaAgent({
      algoliaAgents,
      client: 'AdvancedPersonalization',
      version: apiClientVersion,
    }),
    baseHeaders: {
      'content-type': 'text/plain',
      ...auth.headers(),
      ...options.baseHeaders,
    },
    baseQueryParameters: {
      ...auth.queryParameters(),
      ...options.baseQueryParameters,
    },
  });

  return {
    transporter,

    /**
     * The `appId` currently in use.
     */
    appId: appIdOption,

    /**
     * The `apiKey` currently in use.
     */
    apiKey: apiKeyOption,

    /**
     * Clears the cache of the transporter for the `requestsCache` and `responsesCache` properties.
     */
    clearCache(): Promise<void> {
      return Promise.all([transporter.requestsCache.clear(), transporter.responsesCache.clear()]).then(() => undefined);
    },

    /**
     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.
     */
    get _ua(): string {
      return transporter.algoliaAgent.value;
    },

    /**
     * Adds a `segment` to the `x-algolia-agent` sent with every requests.
     *
     * @param segment - The algolia agent (user-agent) segment to add.
     * @param version - The version of the agent.
     */
    addAlgoliaAgent(segment: string, version?: string | undefined): void {
      transporter.algoliaAgent.add({ segment, version });
    },

    /**
     * Helper method to switch the API key used to authenticate the requests.
     *
     * @param params - Method params.
     * @param params.apiKey - The new API Key to use.
     */
    setClientApiKey({ apiKey }: { apiKey: string }): void {
      if (!authMode || authMode === 'WithinHeaders') {
        transporter.baseHeaders['x-algolia-api-key'] = apiKey;
      } else {
        transporter.baseQueryParameters['x-algolia-api-key'] = apiKey;
      }
    },

    /**
     * Sends a request to compute the user\'s personalization profile.
     *
     * Required API Key ACLs:
     *  - recommendation
     * @param computeRealtimeUser - The computeRealtimeUser object.
     * @param computeRealtimeUser.userToken - Unique identifier representing a user for which to fetch the personalization profile.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    computeRealtimeUser(
      { userToken }: ComputeRealtimeUserProps,
      requestOptions?: RequestOptions,
    ): Promise<AcceptedResponse> {
      if (!userToken) {
        throw new Error('Parameter `userToken` is required when calling `computeRealtimeUser`.');
      }

      const requestPath = '/2/realtime/users/{userToken}/compute'.replace('{userToken}', encodeURIComponent(userToken));
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      const request: Request = {
        method: 'POST',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * This method lets you send requests to the Algolia REST API.
     * @param customDelete - The customDelete object.
     * @param customDelete.path - Path of the endpoint, for example `1/newFeature`.
     * @param customDelete.parameters - Query parameters to apply to the current query.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    customDelete(
      { path, parameters }: CustomDeleteProps,
      requestOptions?: RequestOptions,
    ): Promise<Record<string, unknown>> {
      if (!path) {
        throw new Error('Parameter `path` is required when calling `customDelete`.');
      }

      const requestPath = '/{path}'.replace('{path}', path);
      const headers: Headers = {};
      const queryParameters: QueryParameters = parameters ? parameters : {};

      const request: Request = {
        method: 'DELETE',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * This method lets you send requests to the Algolia REST API.
     * @param customGet - The customGet object.
     * @param customGet.path - Path of the endpoint, for example `1/newFeature`.
     * @param customGet.parameters - Query parameters to apply to the current query.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    customGet({ path, parameters }: CustomGetProps, requestOptions?: RequestOptions): Promise<Record<string, unknown>> {
      if (!path) {
        throw new Error('Parameter `path` is required when calling `customGet`.');
      }

      const requestPath = '/{path}'.replace('{path}', path);
      const headers: Headers = {};
      const queryParameters: QueryParameters = parameters ? parameters : {};

      const request: Request = {
        method: 'GET',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * This method lets you send requests to the Algolia REST API.
     * @param customPost - The customPost object.
     * @param customPost.path - Path of the endpoint, for example `1/newFeature`.
     * @param customPost.parameters - Query parameters to apply to the current query.
     * @param customPost.body - Parameters to send with the custom request.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    customPost(
      { path, parameters, body }: CustomPostProps,
      requestOptions?: RequestOptions,
    ): Promise<Record<string, unknown>> {
      if (!path) {
        throw new Error('Parameter `path` is required when calling `customPost`.');
      }

      const requestPath = '/{path}'.replace('{path}', path);
      const headers: Headers = {};
      const queryParameters: QueryParameters = parameters ? parameters : {};

      const request: Request = {
        method: 'POST',
        path: requestPath,
        queryParameters,
        headers,
        data: body ? body : {},
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * This method lets you send requests to the Algolia REST API.
     * @param customPut - The customPut object.
     * @param customPut.path - Path of the endpoint, for example `1/newFeature`.
     * @param customPut.parameters - Query parameters to apply to the current query.
     * @param customPut.body - Parameters to send with the custom request.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    customPut(
      { path, parameters, body }: CustomPutProps,
      requestOptions?: RequestOptions,
    ): Promise<Record<string, unknown>> {
      if (!path) {
        throw new Error('Parameter `path` is required when calling `customPut`.');
      }

      const requestPath = '/{path}'.replace('{path}', path);
      const headers: Headers = {};
      const queryParameters: QueryParameters = parameters ? parameters : {};

      const request: Request = {
        method: 'PUT',
        path: requestPath,
        queryParameters,
        headers,
        data: body ? body : {},
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * Deletes a user profile.
     *
     * Required API Key ACLs:
     *  - search
     *  - browse
     *  - recommendation
     * @param deleteUser - The deleteUser object.
     * @param deleteUser.userID - ID of the user.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    deleteUser({ userID }: DeleteUserProps, requestOptions?: RequestOptions): Promise<DeleteUserResponse> {
      if (!userID) {
        throw new Error('Parameter `userID` is required when calling `deleteUser`.');
      }

      const requestPath = '/2/users/{userID}'.replace('{userID}', encodeURIComponent(userID));
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      const request: Request = {
        method: 'DELETE',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * Retrieves a list of configuration objects for each index.
     *
     * Required API Key ACLs:
     *  - search
     *  - browse
     *  - recommendation
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    getConfig(requestOptions?: RequestOptions | undefined): Promise<ConfigurationObject> {
      const requestPath = '/2/config';
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      const request: Request = {
        method: 'GET',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * Retrieves the user\'s personalization profiles containing search filters.
     *
     * Required API Key ACLs:
     *  - recommendation
     * @param getRealtimeUser - The getRealtimeUser object.
     * @param getRealtimeUser.userToken - Unique identifier representing a user for which to fetch the personalization profile.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    getRealtimeUser({ userToken }: GetRealtimeUserProps, requestOptions?: RequestOptions): Promise<RealtimeUser> {
      if (!userToken) {
        throw new Error('Parameter `userToken` is required when calling `getRealtimeUser`.');
      }

      const requestPath = '/2/realtime/users/{userToken}'.replace('{userToken}', encodeURIComponent(userToken));
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      const request: Request = {
        method: 'GET',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * Retrieves a user profile.
     *
     * Required API Key ACLs:
     *  - search
     *  - browse
     *  - recommendation
     * @param getUser - The getUser object.
     * @param getUser.userID - ID of the user.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    getUser({ userID }: GetUserProps, requestOptions?: RequestOptions): Promise<User> {
      if (!userID) {
        throw new Error('Parameter `userID` is required when calling `getUser`.');
      }

      const requestPath = '/2/users/{userID}'.replace('{userID}', encodeURIComponent(userID));
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      const request: Request = {
        method: 'GET',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * Retrieves a list of user profiles in [lexicographical order](https://www.educative.io/answers/what-is-a-lexicographic-order).
     *
     * Required API Key ACLs:
     *  - search
     *  - browse
     *  - recommendation
     * @param getUsers - The getUsers object.
     * @param getUsers.startDate - Filter users by start date (in RFC3339 format). Only users that were updated after the passed date will be returned.
     * @param getUsers.endDate - Filter users by end date (in RFC3339 format). Only users that were updated before the passed date will be returned.
     * @param getUsers.indices - Filter users by matching indices. If multiple indices are passed, returned users will match all indices.
     * @param getUsers.affinity - Filter users by affinity name and value. If multiple values are passed, returned users will match all values.
     * @param getUsers.limit - Limit the number of users in the response. The value of this parameter ranges from 1 to 1000.
     * @param getUsers.nextPageToken - Reference for the next page, when navigating forward using pagination. Can\'t be used in the same request as `previousPageToken`.
     * @param getUsers.previousPageToken - Reference for the previous page, when navigating backward using pagination. Can\'t be used in the same request as `nextPageToken`.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    getUsers(
      { startDate, endDate, indices, affinity, limit, nextPageToken, previousPageToken }: GetUsersProps = {},
      requestOptions: RequestOptions | undefined = undefined,
    ): Promise<GetUsersResponse> {
      const requestPath = '/2/users';
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      if (startDate !== undefined) {
        queryParameters['startDate'] = startDate.toString();
      }

      if (endDate !== undefined) {
        queryParameters['endDate'] = endDate.toString();
      }

      if (indices !== undefined) {
        queryParameters['indices'] = indices.toString();
      }

      if (affinity !== undefined) {
        queryParameters['affinity'] = affinity.toString();
      }

      if (limit !== undefined) {
        queryParameters['limit'] = limit.toString();
      }

      if (nextPageToken !== undefined) {
        queryParameters['nextPageToken'] = nextPageToken.toString();
      }

      if (previousPageToken !== undefined) {
        queryParameters['previousPageToken'] = previousPageToken.toString();
      }

      const request: Request = {
        method: 'GET',
        path: requestPath,
        queryParameters,
        headers,
      };

      return transporter.request(request, requestOptions);
    },

    /**
     * Updates the configuration.  The configuration is a list of configuration objects for each index. To configure Advanced Personalization for an index, create a new configuration object for the index.
     *
     * Required API Key ACLs:
     *  - search
     *  - browse
     *  - recommendation
     * @param configurationParameters - The configurationParameters object.
     * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     */
    putConfig(
      configurationParameters: ConfigurationParameters,
      requestOptions?: RequestOptions,
    ): Promise<PutConfigResponse> {
      if (!configurationParameters) {
        throw new Error('Parameter `configurationParameters` is required when calling `putConfig`.');
      }

      if (!configurationParameters.indices) {
        throw new Error('Parameter `configurationParameters.indices` is required when calling `putConfig`.');
      }
      if (!configurationParameters.personalizationReRanking) {
        throw new Error(
          'Parameter `configurationParameters.personalizationReRanking` is required when calling `putConfig`.',
        );
      }
      if (!configurationParameters.profileType) {
        throw new Error('Parameter `configurationParameters.profileType` is required when calling `putConfig`.');
      }
      if (!configurationParameters.features) {
        throw new Error('Parameter `configurationParameters.features` is required when calling `putConfig`.');
      }

      const requestPath = '/2/config';
      const headers: Headers = {};
      const queryParameters: QueryParameters = {};

      const request: Request = {
        method: 'PUT',
        path: requestPath,
        queryParameters,
        headers,
        data: configurationParameters,
      };

      return transporter.request(request, requestOptions);
    },
  };
}
