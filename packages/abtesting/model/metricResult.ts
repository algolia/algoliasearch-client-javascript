// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { MetricMetadata } from './metricMetadata';

export type MetricResult = {
  name: string;

  /**
   * Date and time when the metric was last updated, in RFC 3339 format.
   */
  updatedAt: string;

  value: number;

  /**
   * The upper bound of the 95% confidence interval for the metric value. The confidence interval is calculated using  either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate),  while relative difference is used for continuous metrics (e.g., revenue).
   */
  valueCIHigh?: number | undefined;

  /**
   * The lower bound of the 95% confidence interval for the metric value. The confidence interval is calculated using  either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate),  while relative difference is used for continuous metrics (e.g., revenue).
   */
  valueCILow?: number | undefined;

  /**
   * PValue for the first variant (control) will always be 0. For the other variants, pValue is calculated for the current variant based on the control.
   */
  pValue: number;

  /**
   * Dimension defined during test creation.
   */
  dimension?: string | undefined;

  metadata?: MetricMetadata | undefined;

  /**
   * The value that was computed during error correction. It is used to determine significance of the metric pValue. The critical value is calculated using Bonferroni or Benjamini-Hochberg corrections, based on the given  configuration during the A/B test creation.
   */
  criticalValue?: number | undefined;

  /**
   * Whether the pValue is significant or not based on the critical value and the error correction algorithm used.
   */
  significant?: boolean | undefined;
};
