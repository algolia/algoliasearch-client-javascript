// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

/**
 * Recommend rules parameters.
 */
export type SearchRecommendRulesParams = {
  /**
   * Search query.
   */
  query?: string | undefined;

  /**
   * Only search for rules with matching context.
   */
  context?: string | undefined;

  /**
   * Requested page of the API response.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
   */
  page?: number | undefined;

  /**
   * Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
   */
  hitsPerPage?: number | undefined;

  /**
   * Whether to only show rules where the value of their `enabled` property matches this parameter. If absent, show all rules, regardless of their `enabled` property.
   */
  enabled?: boolean | undefined;

  /**
   * Filter expression. This only searches for rules matching the filter expression.
   */
  filters?: string | undefined;

  /**
   * Include facets and facet values in the response. Use `[\'*\']` to include all facets.
   */
  facets?: Array<string> | undefined;

  /**
   * Maximum number of values to return for each facet.
   */
  maxValuesPerFacet?: number | undefined;
};
