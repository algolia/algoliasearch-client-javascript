// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { Composition } from '../model/composition';
import type { CompositionRule } from '../model/compositionRule';
import type { CompositionRulesBatchParams } from '../model/compositionRulesBatchParams';

import type { RequestBody } from '../model/requestBody';

import type { SearchCompositionRulesParams } from '../model/searchCompositionRulesParams';

import type { SearchForFacetValuesRequest } from '../model/searchForFacetValuesRequest';

/**
 * Properties for the `customDelete` method.
 */
export type CustomDeleteProps = {
  /**
   * Path of the endpoint, for example `1/newFeature`.
   */
  path: string;
  /**
   * Query parameters to apply to the current query.
   */
  parameters?: { [key: string]: any } | undefined;
};

/**
 * Properties for the `customGet` method.
 */
export type CustomGetProps = {
  /**
   * Path of the endpoint, for example `1/newFeature`.
   */
  path: string;
  /**
   * Query parameters to apply to the current query.
   */
  parameters?: { [key: string]: any } | undefined;
};

/**
 * Properties for the `customPost` method.
 */
export type CustomPostProps = {
  /**
   * Path of the endpoint, for example `1/newFeature`.
   */
  path: string;
  /**
   * Query parameters to apply to the current query.
   */
  parameters?: { [key: string]: any } | undefined;
  /**
   * Parameters to send with the custom request.
   */
  body?: Record<string, unknown> | undefined;
};

/**
 * Properties for the `customPut` method.
 */
export type CustomPutProps = {
  /**
   * Path of the endpoint, for example `1/newFeature`.
   */
  path: string;
  /**
   * Query parameters to apply to the current query.
   */
  parameters?: { [key: string]: any } | undefined;
  /**
   * Parameters to send with the custom request.
   */
  body?: Record<string, unknown> | undefined;
};

/**
 * Properties for the `deleteComposition` method.
 */
export type DeleteCompositionProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
};

/**
 * Properties for the `deleteCompositionRule` method.
 */
export type DeleteCompositionRuleProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  /**
   * Unique identifier of a rule object.
   */
  objectID: string;
};

/**
 * Properties for the `getComposition` method.
 */
export type GetCompositionProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
};

/**
 * Properties for the `getRule` method.
 */
export type GetRuleProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  /**
   * Unique identifier of a rule object.
   */
  objectID: string;
};

/**
 * Properties for the `getTask` method.
 */
export type GetTaskProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  /**
   * Unique task identifier.
   */
  taskID: number;
};

/**
 * Properties for the `listCompositions` method.
 */
export type ListCompositionsProps = {
  /**
   * Requested page of the API response. If `null`, the API response is not paginated.
   */
  page?: number | undefined;
  /**
   * Number of hits per page.
   */
  hitsPerPage?: number | undefined;
};

/**
 * Properties for the `putComposition` method.
 */
export type PutCompositionProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  composition: Composition;
};

/**
 * Properties for the `putCompositionRule` method.
 */
export type PutCompositionRuleProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  /**
   * Unique identifier of a rule object.
   */
  objectID: string;
  compositionRule: CompositionRule;
};

/**
 * Properties for the `saveRules` method.
 */
export type SaveRulesProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  rules: CompositionRulesBatchParams;
};

/**
 * Properties for the `search` method.
 */
export type SearchProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  requestBody: RequestBody;
};

/**
 * Properties for the `searchCompositionRules` method.
 */
export type SearchCompositionRulesProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  searchCompositionRulesParams?: SearchCompositionRulesParams | undefined;
};

/**
 * Properties for the `searchForFacetValues` method.
 */
export type SearchForFacetValuesProps = {
  /**
   * Unique Composition ObjectID.
   */
  compositionID: string;
  /**
   * Facet attribute in which to search for values.  This attribute must be included in the `attributesForFaceting` index setting with the `searchable()` modifier.
   */
  facetName: string;
  searchForFacetValuesRequest?: SearchForFacetValuesRequest | undefined;
};

export type WaitForCompositionTaskOptions = {
  /**
   * The maximum number of retries. 50 by default.
   */
  maxRetries?: number | undefined;

  /**
   * The function to decide how long to wait between retries.
   */
  timeout?: (retryCount: number) => number;

  /**
   * The `taskID` returned by the method response.
   */

  taskID: number;
  /**
   * The `compositionID` where the operation was performed.
   */
  compositionID: string;
};
